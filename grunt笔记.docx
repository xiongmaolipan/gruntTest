1、什么是grunt？grunt可以干什么？
grunt是一种自动化任务处理工具框架，有很多插件来扩展他的功能。比如：scss，less文件的编译，js代码的校验纠错只需安装grunt相关插件即可。
grunt基于node.js，用js开发，这样可以借助nodejs实现跨系统跨平台的桌面端操作，比如：文件操作等，此外，grunt以及他的插件都可以作为一个包，可以用npm进行安装管理。
2、安装grunt
安装grunt之前先要安装nodejs
（执行命令行npm install grunt --save-dev即可安装，--save-dev表示把刚安装的东西添加到package。Json文件中，即当前项目的依赖项）
3、Package.Json文件
 package.json 文件是 Node.js 来描述一个项目的文件，JSON 格式。
生成package.json文件
（执行命令行npm init即可，之后会填写项目的名称，版本号，目的以及入口js文件名，作者等信息，默认回车即可）
4、grunt几个常用的插件

合并文件：grunt-contrib-concat
语法检查：grunt-contrib-jshint
  Html压缩：grunt-contrib-htmlmin
Scss 编译：grunt-contrib-sass
压缩文件：grunt-contrib-uglify
监听文件变动：grunt-contrib-watch
建立本地服务器：grunt-contrib-connect
安装插件
（执行命令行：npm install --save-dev grunt-contrib-concat grunt-contrib-jshint grunt-contrib-htmlmin grunt-contrib-sass grunt-contrib-uglify grunt-contrib-watch grunt-contrib-connect
）
安装完成后，文件目录下多了一个 node_modules 文件夹，都是我们刚安装的插件
5、配置 Gruntfile.js 的语法
Grunt会读取该文件来执行，代码块如下：
module.exports = function(grunt) {
    ...
};
该js文件中，与grunt相关的主要有三块代码：任务配置代码、插件加载代码、任务注册代码。
这三块代码，任务配置代码就是调用插件配置一下要执行的任务和实现的功能，插件加载代码就是把需要用到的插件加载进来，任务注册代码就是注册一个 task，里面包含刚在前面编写的任务配置代码。
这样，就可以用 grunt 来执行注册的一个 task 从而根据任务配置代码调用需要的插件来执行相应的操作。

pkg: grunt.file.readJSON('package.json') 功能是读取 package.json 文件，并把里面的信息获取出来，方便在后面任务中应用。


（1） 任务配置 uglify 对象，这个名字是固定的，表示下面任务是调用 uglify 插件的，先配置了一些全局的 options 然后新建了一个 build 任务。
插件语法介绍地址：https://github.com/gruntjs/grunt-contrib-uglify
uglify:{
   options:{
       stripBanners:true,
       banner:'/*! <%=pkg.name%>-<%=pkg.version%>.js <%= grunt.template.today("yyyy-mm-dd") %> */\n'
    },
    build:{
       src:'src/test.js',
       dest:'build/<%=pkg.name%>-<%=pkg.version%>.js.min.js'
    }
 },
（2）插件加载
grunt.loadNpmTasks('grunt-contrib-uglify');
（3）任务注册
grunt.registerTask('default',['jshint','concat','uglify','cssmin','watch']);

你在 default 上面注册了一个 Uglify 任务，default 就是别名，它是默认的 task，当你在项目目录执行 grunt 的时候，它会执行注册到 default 上面的任务。（命令：grunt）
也可以注册别的任务别名：如：mygrunt   (运行时命令：grunt mygrunt)
grunt.registerTask('mygrunt', ['uglify:build']);//执行特定别名下的特定任务


6、Connect本地服务以及watch监听文件变动
未注册本地服务之前测试地址：file:///E:/gruntText/src/main.html
注册connect服务之后的测试地址：http://localhost:9001/src/main.html或者http://localhost:9001

Watch配置代码：
watch:{
           build:{
               files:['src/*.scss','src/*.js'],
               tasks:['jshint','sass','uglify','concat'],
               options:{
                   spawn:false
               }
           }
       }
注意：tasks属性中即使配置了任务（任务中也包含了任务的文件以及目标生成文件），但是files属性中还是要列出所有需要监听的文件（此处只监听scss以及js格式文件，所以修改html是不会被监听的）

Connect配置代码：
connect:{
          options:{
                port: 9000,
                open: true,
                livereload:35729,
                hostname:'localhost'
          },
          server:{
            options:{
              port:9001,
              base:'./'
            }
          }
       }
总结：
1、分享项目的时候只需要上传package。Json文件即可，上面记录了你项目所需的依赖项
2、新人接触项目之后，只需要在这个项目文件夹下面，输入命令 npm install，NPM 会自动读取 package.json 文件，将 grunt 和有关插件给你下载下来，很方便的。
3、也不需要在本地上传的时候删除，用 git 的话，可以使用 .gitignore 文件来过滤掉这个文件夹，禁止 git 追踪。
4、我们项目中的拉下来的gruntFile.js以及package.json目前来说是用不到的，其实我们用到的是unpackage文件夹下的gruntfiles.js以及package.json,该文件夹下的grunt文件夹里面的文件也用不到。
5、除了 Grunt 之外，同类型比较火的还有 Gulp 这个工具。其实两个东西的功能是一样的，只不过是任务配置 JS 的语法不同，Gulp 的 Gulpfile.js 的写法更加通俗易懂，上手更快。但是 Gulp 的插件等感觉不如 Grunt，Grunt 官方提供了一些常见的插件，满足大部分日常工作，而且可靠值得信赖，而 Gulp 好像没有太多官方出品，各种插件不太规范。简单的说，Grunt 和 Gulp 就像 iPhone 与 Android 一样，一个质量高学习难一点，一个学起来简单但是有点那个，你懂得。
此外，可以看一些高手的项目，你会发现更好的 Grunt 用法，比如 Yeoman 生成的项目，就有很完善的 Grunt 任务和插件.